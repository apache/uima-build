<?xml version="1.0" encoding="UTF-8"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one
   or more contributor license agreements.  See the NOTICE file
   distributed with this work for additional information
   regarding copyright ownership.  The ASF licenses this file
   to you under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.    
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.apache.uima</groupId>
    <artifactId>parent-pom</artifactId>
    <version>10</version>
    <relativePath>../parent-pom</relativePath>
  </parent>

  <artifactId>uima-eclipse-update-site-maintenance</artifactId>
  <packaging>pom</packaging>
  <version>1-SNAPSHOT</version>

  <name>Apache UIMA Eclipse: ${project.artifactId}</name>
  <description>UIMA Eclipse update site maintenance</description>
  <url>${uimaWebsiteUrl}</url>

  <scm>
    <connection>
      scm:svn:http://svn.apache.org/repos/asf/uima/build/trunk/uima-eclipse-update-site-maintenance
    </connection>
    <developerConnection>
      scm:svn:https://svn.apache.org/repos/asf/uima/build/trunk/uima-eclipse-update-site-maintenance
    </developerConnection>
    <url>
      http://svn.apache.org/viewvc/uima/build/trunk/uima-eclipse-update-site-maintenance
    </url>
  </scm>

  <properties>
    <uimaScmRoot>uimaj</uimaScmRoot>
    <uimaScmProject>${project.artifactId}</uimaScmProject>
    <eclipseUpdateSite>${project.build.directory}/eclipse-update-site</eclipseUpdateSite>
    <eclipseUpdateSlice>${eclipseUpdateSite}/${subsite}</eclipseUpdateSlice>
    
  </properties>


                  <!-- ============================================= -->
                  <!-- Slice off most recent version subsite         -->
                  <!--   Needs 1 parameter:                         -->
                  <!--     -Dsubsite=...                             -->
                  <!--         name of the subsite: uimaj, ruta, etc.-->
                  <!--   example                                     -->
                  <!--     -Dsubsite=uimaj                           -->
                  <!-- ============================================= -->

  <build>
   <plugins>
     <plugin>
       <artifactId>maven-antrun-plugin</artifactId>
       <executions>
         <execution>
           <id>SliceSubsite</id>
           <phase>test</phase>  
           <configuration>
             <target>
               <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" />
               
               <!-- if the property uima-maven-build-eclipse-home is set, use it, otherwise don't -->
               <condition property="eclipse.home" value="${uima-maven-build-eclipse-home}">
                 <not>
                   <equals arg1="${uima-maven-build-eclipse-home}" arg2="$${uima-maven-build-eclipse-home}" />
                 </not>
               </condition>

               <property environment="envVar" />
               <condition property="eclipse.home" value="${envVar.ECLIPSE_HOME}">
                 <isset property="envVar.ECLIPSE_HOME" />
               </condition>

               <fail unless="eclipse.home" message="********** Please set up and use an ant property eclipse.home set to an Eclipse installation at level 3.3 or later, e.g. c:/eclipses/3.3/eclipse" />
                                          
               <!-- We run an internal Ant this way in order to have the Ant impl have the special defined tasks for p2 -->
               
               <java jar="${eclipse-equinox-launcher}" fork="true" failonerror="true" maxmemory="256m">
                 <arg line="-application org.eclipse.ant.core.antRunner" />
                 <arg line="-f subsiteSlicing.xml" />
                 <arg line="-verbose" />
                 <arg line="-Dsubsite=${subsite}"/>
               </java>
               
               <!-- ============================================== -->
               <!--   If apache-release, do checksums and gpg sign -->
               <!-- ============================================== -->
                         
               <if>
                 <equals arg1="${isApacheRelease}" arg2="true" />
                 <then>
                   <echo message="Generating checksums for all jars" />
                   <checksum algorithm="sha1" format="MD5SUM">
                     <fileset dir="${eclipseUpdateSlice}">
                       <include name="**/*.jar.pack.gz" />
                       <include name="**/*.jar" />
                     </fileset>
                   </checksum>
                   <checksum algorithm="md5" format="MD5SUM">
                     <fileset dir="${eclipseUpdateSlice}">
                       <include name="**/*.jar.pack.gz" />
                       <include name="**/*.jar" />
                     </fileset>
                   </checksum>

                   <echo message="Generating gpg signatures for all jars" />
                   <!-- gpg fails if sig file already exists, so delete it if it exists -->
                   <delete>
                     <fileset dir="${eclipseUpdateSlice}" includes="**/*.asc" />
                   </delete>
                   <apply executable="gpg" dir="${eclipseUpdateSlice}"> 
                     <arg value="--detach-sign" />
                     <arg value="--armor" />
                     <!-- batch flag needed to avoid gpg hang up -->
                     <arg value="--batch" />
                     <fileset dir="${eclipseUpdateSlice}">
                       <include name="**/*.jar" />
                       <include name="**/*.jar.pack.gz" />
                     </fileset>
                   </apply> 
                   
                 </then>
                 <else>
                   <echo message=""/>
                   <echo message="********************************************"/>
                   <echo message="No signing done; don't upload these results!"/>  
                   <echo message="  Run with -Papache-release to do signing."/>
                   <echo message="********************************************"/>
                   <echo message=""/>
                 </else>                     
               </if>          

             </target>
           </configuration>
           <goals>
             <goal>run</goal>
           </goals>
         </execution>
       </executions>
     </plugin>
    </plugins>
  </build>    

</project>